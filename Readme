
REDIRECTION :


de base :

ls -l  = (pas de stdin) sortie dans le stdout

cat seul (boucle infini) = lit le stdin puis l ecrit dans stdout

wc + ctrl +d = lit le stdin puis out dans stdout






avec pipe '|'  : 


ls -l | wc =  ecrit le ls dans le pipe et le wc lit depuit le pipe ET le met dans stdout.





avec redirection : 


< : ce qui suit devient stdin

> : devient stdout.


< infile cat | wc  -l > outfile  = lit depuis le infile, le cat dans le pipe, wc lit depuis le pipe et ecrit vers outfile











Open :

renvoit le fd qu il vient d open.
Parem = permission sur le fichier :
  O_RDONLY = lecture seule 
  O_WRONLY = ecriture seule
  O_RDWR = les 2

 O_CREAT = le cree si existe pas
 O_TRUNC = supprime si y avait truc dans fichier
 O_APPEND = ecrit a la suite du fichie (pour le signe >>)



close : 

    pour ne pas laisser de fd ouverts

    car un fd ouvert prend de la ram.

    1024 fd ouvert max en meme temps




access :

verifie les droit du fichier



unlink :

rm un fichier







fork :

pid_t pid = fork();


duplique le programme : dans le parent donne le pid du fils

et le fils renvoit 0. 

-1 s erreur






pipe(pipefd[2])  : 


parent : ecrit dans 1
child : lit dans 0





execve : 


remplace le programme par un autre (la suite du code s execute pas)


pathname, argv et env 

pathname = chemin absolue de la commande
argv = le vrai commande dans un double tableau avec les flag -l etc + NULL a la fin
et l env. 






wait : 

attend n importe quel processus et return le pid du termine

status = WIFEXITED ou WEXITSTATUS

WIFEXITED = s est termine normalement
WEXITSTATUS = a retourner un code d erreur 





waitpid : 

attends specifiquement 




dup (old fd) :

pointe vers le meme objet mais n ont pas le meme fd




dup2(old, new) : 

fait pointer newfd sur oldfd 